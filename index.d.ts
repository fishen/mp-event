// Generated by dts-bundle v0.7.3

declare module 'mp-event' {
    export { bindEvent, event } from "mp-event/decoraters";
    export { on, emit, once, off, clear } from "mp-event/events";
    export { EVENT_OPTIONS } from "mp-event/constants";
}

declare module 'mp-event/decoraters' {
    import * as evt from "mp-event/events";
    import { EventName, IBindEventOptions, IEventOptions } from "mp-event/type";
    /**
        * Register events
        * @param options event options
        */
    export function event(options?: IEventOptions): (constructor: any) => void;
    export namespace event {
            var on: typeof evt.on;
            var off: typeof evt.off;
            var once: typeof evt.once;
            var emit: typeof evt.emit;
            var clear: typeof evt.clear;
    }
    /**
        * Bind the current method as a callback function for the specified event
        * @param options event options
        */
    export function bindEvent(options?: EventName | IBindEventOptions): (target: any, name: EventName, descriptor: PropertyDescriptor) => void;
}

declare module 'mp-event/events' {
    import { EventName, IOffOptions, IOnceOptions, IOnOptions } from "mp-event/type";
    /**
        * Register an event subscription
        * @param name event name
        * @param callback callback function when the event is triggered
        * @param options subscription options
        */
    export function on<T>(name: EventName, callback: (this: T, result: any) => void, options?: IOnOptions<T>): void;
    /**
        * Register an event subscription, but only be triggered once
        * @param name event name
        * @param callback callback function when the event is triggered
        * @param options subscription options
        */
    export function once<T>(name: EventName, callback: (this: T, result: any) => void, options?: IOnceOptions<T>): void;
    /**
        * Cancel event subscription by name and target
        * @param name event name
        * @param options subscription options
        */
    export function off<T>(name: EventName, options?: IOffOptions<T>): void;
    /**
        * Clear subscriptions by event name
        * @param name event name
        * @param clearAllIfNameIsNil whether clear all subscriptions if event name is null or undefined
        */
    export function clear(name?: EventName, clearAllIfNameIsNil?: boolean): void;
    /**
        * Trigger event by name and data
        * @param name event name
        * @param data event data pass to the callback functions.
        */
    export function emit<T>(name: EventName, data?: T): void;
}

declare module 'mp-event/constants' {
    export const EVENT_OPTIONS: unique symbol;
}

declare module 'mp-event/type' {
    export type EventName = string | symbol;
    export type BoundEvent = [IBindEventOptions, (...args: any) => any];
    export interface IOffOptions<T = any> {
            /**
                * The value to be passed as the this parameter to the target function when the callback function is called
                * Also used to distinguish different callback functions under the same event
                */
            target?: T;
    }
    export interface IOnceOptions<T = any> extends IOffOptions<T> {
            /**
                * Register a unique callback function by event name and target
                */
            unique?: boolean;
    }
    export interface IOnOptions<T = any> extends IOnceOptions<T> {
            /**
                * Whether the event is called only once
                */
            once?: boolean;
    }
    export interface IEventOptions {
            /**
                * the lifetime for initializing events.
                * @default onLoad
                */
            onLifetime?: string;
            /**
                * the lifetime for deferring events.
                * @default onShow
                */
            deferralLifetime?: string;
            /**
                * the lifetime for destroying events.
                * @default onUnload
                */
            offLifetime?: string;
    }
    export interface IBindEventOptions extends Omit<IOnOptions, "target"> {
            /**
                * event name
                */
            name?: EventName;
            /**
                * whether to delay execution to the specified lifetime, such as 'onShow'
                */
            deferred?: boolean;
            /**
                * whether to trigger only once
                */
            once?: boolean;
            /**
                * Whether to register as a global event
                */
            global?: boolean;
    }
}

